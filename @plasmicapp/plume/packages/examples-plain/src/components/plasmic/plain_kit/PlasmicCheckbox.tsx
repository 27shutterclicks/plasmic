/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: CcnzMSyt18
import * as React from 'react';
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';
import '../plasmic__default_style.css'; // plasmic-import: global/defaultcss
import './plasmic_plain_kit.css'; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import './PlasmicCheckbox.css'; // plasmic-import: CcnzMSyt18/css
import CheckIcon from './PlasmicIcon__Check'; // plasmic-import: g6WlrAGLKi/icon
import IndeterminateIcon from './PlasmicIcon__Indeterminate'; // plasmic-import: b6p3Dmw_Vl/icon

export type PlasmicCheckbox__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<'isSelected'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  isIndeterminate?: SingleBooleanChoiceArg<'isIndeterminate'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
};

export const PlasmicCheckbox__VariantProps = new Array<
  keyof PlasmicCheckbox__VariantsArgs
>('isSelected', 'isDisabled', 'isIndeterminate', 'hasLabel');

export type PlasmicCheckbox__ArgsType = {
  children?: React.ReactNode;
};

export const PlasmicCheckbox__ArgProps = new Array<
  keyof PlasmicCheckbox__ArgsType
>('children');

export type PlasmicCheckbox__OverridesType = {
  root?: Flex<'div'>;
  checkbox?: Flex<'div'>;
  check?: Flex<'svg'>;
  focusRing?: Flex<'div'>;
  indeterminate?: Flex<'svg'>;
  labelContainer?: Flex<'div'>;
};

export interface DefaultCheckboxProps {
  children?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<'isSelected'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  isIndeterminate?: SingleBooleanChoiceArg<'isIndeterminate'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
  className?: string;
}

function PlasmicCheckbox__RenderFunc(props: {
  variants: PlasmicCheckbox__VariantsArgs;
  args: PlasmicCheckbox__ArgsType;
  overrides: PlasmicCheckbox__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps,
  ] = useTrigger('useFocusVisibleWithin', {
    isTextInput: false,
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      data-plasmic-wrap-flex-child={true}
      className={classNames({
        'Checkbox__root--__FszNpiC4se': triggers.focusVisibleWithin_root,
        'Checkbox__root--hasLabel__FszNpm1KDy': hasVariant(
          variants,
          'hasLabel',
          'hasLabel'
        ),

        'Checkbox__root--isDisabled__FszNpQZTls': hasVariant(
          variants,
          'isDisabled',
          'isDisabled'
        ),

        'Checkbox__root--isSelected__FszNp96awY': hasVariant(
          variants,
          'isSelected',
          'isSelected'
        ),

        Checkbox__root__FszNp: true,
        'plasmic-default__all': true,
        'plasmic-default__div': true,
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={'checkbox'}
        data-plasmic-override={overrides.checkbox}
        className={classNames({
          'Checkbox__checkbox--__LFOHxiC4se': triggers.focusVisibleWithin_root,
          'Checkbox__checkbox--isIndeterminate__LFOHxkGU9u': hasVariant(
            variants,
            'isIndeterminate',
            'isIndeterminate'
          ),

          'Checkbox__checkbox--isSelected__LFOHx96awY': hasVariant(
            variants,
            'isSelected',
            'isSelected'
          ),

          Checkbox__checkbox__LFOHx: true,
          'plasmic-default__all': true,
          'plasmic-default__div': true,
        })}
      >
        {(hasVariant(variants, 'isSelected', 'isSelected') ? true : false) ? (
          <CheckIcon
            data-plasmic-name={'check'}
            data-plasmic-override={overrides.check}
            className={classNames({
              'Checkbox__check--isIndeterminate__8BAPDkGU9u': hasVariant(
                variants,
                'isIndeterminate',
                'isIndeterminate'
              ),

              'Checkbox__check--isSelected__8BAPD96awY': hasVariant(
                variants,
                'isSelected',
                'isSelected'
              ),

              Checkbox__check__8BAPD: true,
              'plasmic-default__all': true,
              'plasmic-default__svg': true,
            })}
            role={'img'}
            {...({} as any)}
          ></CheckIcon>
        ) : null}
        {(triggers.focusVisibleWithin_root ? true : false) ? (
          <div
            data-plasmic-name={'focusRing'}
            data-plasmic-override={overrides.focusRing}
            className={classNames({
              'Checkbox__focusRing--__aZjbkiC4se':
                triggers.focusVisibleWithin_root,
              Checkbox__focusRing__aZjbk: true,
              'plasmic-default__all': true,
              'plasmic-default__div': true,
            })}
          ></div>
        ) : null}
        {(
          hasVariant(variants, 'isIndeterminate', 'isIndeterminate')
            ? true
            : false
        ) ? (
          <IndeterminateIcon
            data-plasmic-name={'indeterminate'}
            data-plasmic-override={overrides.indeterminate}
            className={classNames({
              'Checkbox__indeterminate--isIndeterminate__nTPrJkGU9u': hasVariant(
                variants,
                'isIndeterminate',
                'isIndeterminate'
              ),

              Checkbox__indeterminate__nTPrJ: true,
              'plasmic-default__all': true,
              'plasmic-default__svg': true,
            })}
            role={'img'}
            {...({} as any)}
          ></IndeterminateIcon>
        ) : null}
      </div>

      {(hasVariant(variants, 'hasLabel', 'hasLabel') ? true : false) ? (
        <div
          data-plasmic-name={'labelContainer'}
          data-plasmic-override={overrides.labelContainer}
          className={classNames({
            'Checkbox__labelContainer--hasLabel__bL4uQm1KDy': hasVariant(
              variants,
              'hasLabel',
              'hasLabel'
            ),

            Checkbox__labelContainer__bL4uQ: true,
            'plasmic-default__all': true,
            'plasmic-default__div': true,
          })}
        >
          <PlasmicSlot
            defaultContents={'Do this for me'}
            value={args.children}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

class PlasmicCheckbox__Renderer extends Renderer<
  PlasmicCheckbox__VariantsArgs,
  PlasmicCheckbox__ArgsType,
  PlasmicCheckbox__OverridesType,
  'root'
> {
  constructor(
    variants: PlasmicCheckbox__VariantsArgs,
    args: PlasmicCheckbox__ArgsType
  ) {
    super(variants, args, PlasmicCheckbox__RenderFunc, 'root');
  }

  protected create(
    variants: PlasmicCheckbox__VariantsArgs,
    args: PlasmicCheckbox__ArgsType
  ) {
    return new PlasmicCheckbox__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicCheckbox__VariantsArgs)[] {
    return PlasmicCheckbox__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicCheckbox__ArgsType)[] {
    return PlasmicCheckbox__ArgProps;
  }

  forNode(
    name: 'labelContainer'
  ): NodeRenderer<
    PlasmicCheckbox__VariantsArgs,
    PlasmicCheckbox__ArgsType,
    {
      labelContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'indeterminate'
  ): NodeRenderer<
    PlasmicCheckbox__VariantsArgs,
    PlasmicCheckbox__ArgsType,
    {
      indeterminate?: Flex<'svg'>;
    }
  >;

  forNode(
    name: 'focusRing'
  ): NodeRenderer<
    PlasmicCheckbox__VariantsArgs,
    PlasmicCheckbox__ArgsType,
    {
      focusRing?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'check'
  ): NodeRenderer<
    PlasmicCheckbox__VariantsArgs,
    PlasmicCheckbox__ArgsType,
    {
      check?: Flex<'svg'>;
    }
  >;

  forNode(
    name: 'checkbox'
  ): NodeRenderer<
    PlasmicCheckbox__VariantsArgs,
    PlasmicCheckbox__ArgsType,
    {
      checkbox?: Flex<'div'>;
      check?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
      indeterminate?: Flex<'svg'>;
    }
  >;

  forNode(
    name: 'root'
  ): NodeRenderer<
    PlasmicCheckbox__VariantsArgs,
    PlasmicCheckbox__ArgsType,
    {
      root?: Flex<'div'>;
      checkbox?: Flex<'div'>;
      check?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
      indeterminate?: Flex<'svg'>;
      labelContainer?: Flex<'div'>;
    }
  >;

  forNode(name: keyof PlasmicCheckbox__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicCheckboxRootProps = PlasmicCheckbox__VariantsArgs &
  PlasmicCheckbox__ArgsType & {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: {
      root?: Flex<'div'>;
      checkbox?: Flex<'div'>;
      check?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
      indeterminate?: Flex<'svg'>;
      labelContainer?: Flex<'div'>;
    };

    root?: Flex<'div'>;
    checkbox?: Flex<'div'>;
    check?: Flex<'svg'>;
    focusRing?: Flex<'div'>;
    indeterminate?: Flex<'svg'>;
    labelContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicCheckbox__VariantsArgs
    | keyof PlasmicCheckbox__ArgsType
    | 'variants'
    | 'args'
    | 'root'
    | 'checkbox'
    | 'check'
    | 'focusRing'
    | 'indeterminate'
    | 'labelContainer'
  >;

export const PlasmicCheckbox = function PlasmicCheckboxRoot<
  T extends PlasmicCheckboxRootProps
>(props: T & StrictProps<T, PlasmicCheckboxRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'root',
    descendantNames: [
      'root',
      'checkbox',
      'check',
      'focusRing',
      'indeterminate',
      'labelContainer',
    ],

    internalArgPropNames: PlasmicCheckbox__ArgProps,
    internalVariantPropNames: PlasmicCheckbox__VariantProps,
  });

  return PlasmicCheckbox__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'root',
  });
};

type PlasmicCheckboxCheckboxProps = PlasmicCheckbox__VariantsArgs &
  PlasmicCheckbox__ArgsType & {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: {
      checkbox?: Flex<'div'>;
      check?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
      indeterminate?: Flex<'svg'>;
    };

    checkbox?: Flex<'div'>;
    check?: Flex<'svg'>;
    focusRing?: Flex<'div'>;
    indeterminate?: Flex<'svg'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicCheckbox__VariantsArgs
    | keyof PlasmicCheckbox__ArgsType
    | 'variants'
    | 'args'
    | 'checkbox'
    | 'check'
    | 'focusRing'
    | 'indeterminate'
  >;

PlasmicCheckbox.checkbox = function PlasmicCheckboxCheckbox<
  T extends PlasmicCheckboxCheckboxProps
>(props: T & StrictProps<T, PlasmicCheckboxCheckboxProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'checkbox',
    descendantNames: ['checkbox', 'check', 'focusRing', 'indeterminate'],
    internalArgPropNames: PlasmicCheckbox__ArgProps,
    internalVariantPropNames: PlasmicCheckbox__VariantProps,
  });

  return PlasmicCheckbox__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'checkbox',
  });
};

type PlasmicCheckboxCheckProps = PlasmicCheckbox__VariantsArgs &
  PlasmicCheckbox__ArgsType & {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: {
      check?: Flex<'svg'>;
    };

    check?: Flex<'svg'>;
  } & Omit<
    Partial<React.ComponentProps<'svg'>>,
    | keyof PlasmicCheckbox__VariantsArgs
    | keyof PlasmicCheckbox__ArgsType
    | 'variants'
    | 'args'
    | 'check'
  >;

PlasmicCheckbox.check = function PlasmicCheckboxCheck<
  T extends PlasmicCheckboxCheckProps
>(props: T & StrictProps<T, PlasmicCheckboxCheckProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'check',
    descendantNames: ['check'],
    internalArgPropNames: PlasmicCheckbox__ArgProps,
    internalVariantPropNames: PlasmicCheckbox__VariantProps,
  });

  return PlasmicCheckbox__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'check',
  });
};

type PlasmicCheckboxFocusRingProps = PlasmicCheckbox__VariantsArgs &
  PlasmicCheckbox__ArgsType & {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: {
      focusRing?: Flex<'div'>;
    };

    focusRing?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicCheckbox__VariantsArgs
    | keyof PlasmicCheckbox__ArgsType
    | 'variants'
    | 'args'
    | 'focusRing'
  >;

PlasmicCheckbox.focusRing = function PlasmicCheckboxFocusRing<
  T extends PlasmicCheckboxFocusRingProps
>(props: T & StrictProps<T, PlasmicCheckboxFocusRingProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'focusRing',
    descendantNames: ['focusRing'],
    internalArgPropNames: PlasmicCheckbox__ArgProps,
    internalVariantPropNames: PlasmicCheckbox__VariantProps,
  });

  return PlasmicCheckbox__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'focusRing',
  });
};

type PlasmicCheckboxIndeterminateProps = PlasmicCheckbox__VariantsArgs &
  PlasmicCheckbox__ArgsType & {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: {
      indeterminate?: Flex<'svg'>;
    };

    indeterminate?: Flex<'svg'>;
  } & Omit<
    Partial<React.ComponentProps<'svg'>>,
    | keyof PlasmicCheckbox__VariantsArgs
    | keyof PlasmicCheckbox__ArgsType
    | 'variants'
    | 'args'
    | 'indeterminate'
  >;

PlasmicCheckbox.indeterminate = function PlasmicCheckboxIndeterminate<
  T extends PlasmicCheckboxIndeterminateProps
>(props: T & StrictProps<T, PlasmicCheckboxIndeterminateProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'indeterminate',
    descendantNames: ['indeterminate'],
    internalArgPropNames: PlasmicCheckbox__ArgProps,
    internalVariantPropNames: PlasmicCheckbox__VariantProps,
  });

  return PlasmicCheckbox__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'indeterminate',
  });
};

type PlasmicCheckboxLabelContainerProps = PlasmicCheckbox__VariantsArgs &
  PlasmicCheckbox__ArgsType & {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: {
      labelContainer?: Flex<'div'>;
    };

    labelContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicCheckbox__VariantsArgs
    | keyof PlasmicCheckbox__ArgsType
    | 'variants'
    | 'args'
    | 'labelContainer'
  >;

PlasmicCheckbox.labelContainer = function PlasmicCheckboxLabelContainer<
  T extends PlasmicCheckboxLabelContainerProps
>(props: T & StrictProps<T, PlasmicCheckboxLabelContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'labelContainer',
    descendantNames: ['labelContainer'],
    internalArgPropNames: PlasmicCheckbox__ArgProps,
    internalVariantPropNames: PlasmicCheckbox__VariantProps,
  });

  return PlasmicCheckbox__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'labelContainer',
  });
};

PlasmicCheckbox.createRenderer = () => new PlasmicCheckbox__Renderer({}, {});

export default PlasmicCheckbox;
/* prettier-ignore-end */
