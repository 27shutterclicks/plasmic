/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: Ax1JW2mE4J
import * as React from 'react';
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';
import '../plasmic__default_style.css'; // plasmic-import: global/defaultcss
import './plasmic_plain_kit.css'; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import './PlasmicRadio.css'; // plasmic-import: Ax1JW2mE4J/css
import RadioIcon from './PlasmicIcon__Radio'; // plasmic-import: XM6RWYtIx7/icon
import RadioTrueIcon from './PlasmicIcon__RadioTrue'; // plasmic-import: 1EKpdbGgyG/icon

export type PlasmicRadio__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<'isSelected'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
};

export const PlasmicRadio__VariantProps = new Array<
  keyof PlasmicRadio__VariantsArgs
>('isSelected', 'isDisabled', 'hasLabel');

export type PlasmicRadio__ArgsType = {
  children?: React.ReactNode;
};

export const PlasmicRadio__ArgProps = new Array<keyof PlasmicRadio__ArgsType>(
  'children'
);

export type PlasmicRadio__OverridesType = {
  root?: Flex<'div'>;
  buttonContainer?: Flex<'div'>;
  svg?: Flex<'svg'>;
  focusRing?: Flex<'div'>;
  labelContainer?: Flex<'div'>;
};

export interface DefaultRadioProps {
  children?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<'isSelected'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
  className?: string;
}

function PlasmicRadio__RenderFunc(props: {
  variants: PlasmicRadio__VariantsArgs;
  args: PlasmicRadio__ArgsType;
  overrides: PlasmicRadio__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps,
  ] = useTrigger('useFocusVisibleWithin', {
    isTextInput: false,
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      data-plasmic-wrap-flex-child={true}
      className={classNames({
        'Radio__root--__Jyzz2BRSR8': triggers.focusVisibleWithin_root,
        'Radio__root--isDisabled__Jyzz27qjsD': hasVariant(
          variants,
          'isDisabled',
          'isDisabled'
        ),

        'Radio__root--isSelected__Jyzz2I6GNr': hasVariant(
          variants,
          'isSelected',
          'isSelected'
        ),

        Radio__root__Jyzz2: true,
        'plasmic-default__all': true,
        'plasmic-default__div': true,
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={'buttonContainer'}
        data-plasmic-override={overrides.buttonContainer}
        className={classNames({
          Radio__buttonContainer__gYYVA: true,
          'plasmic-default__all': true,
          'plasmic-default__div': true,
        })}
      >
        <PlasmicIcon
          data-plasmic-name={'svg'}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant(variants, 'isSelected', 'isSelected')
              ? RadioTrueIcon
              : RadioIcon
          }
          className={classNames({
            'Radio__svg--isDisabled__mQll17qjsD': hasVariant(
              variants,
              'isDisabled',
              'isDisabled'
            ),

            'Radio__svg--isSelected__mQll1I6GNr': hasVariant(
              variants,
              'isSelected',
              'isSelected'
            ),

            Radio__svg__mQll1: true,
            'plasmic-default__all': true,
            'plasmic-default__svg': true,
          })}
          role={'img'}
          {...({} as any)}
        ></PlasmicIcon>

        {(triggers.focusVisibleWithin_root ? true : false) ? (
          <div
            data-plasmic-name={'focusRing'}
            data-plasmic-override={overrides.focusRing}
            className={classNames({
              'Radio__focusRing--__pWeAxBRSR8':
                triggers.focusVisibleWithin_root,
              Radio__focusRing__pWeAx: true,
              'plasmic-default__all': true,
              'plasmic-default__div': true,
            })}
          ></div>
        ) : null}
      </div>

      {(hasVariant(variants, 'hasLabel', 'hasLabel') ? true : false) ? (
        <div
          data-plasmic-name={'labelContainer'}
          data-plasmic-override={overrides.labelContainer}
          className={classNames({
            'Radio__labelContainer--hasLabel__AzxFRjQ7tw': hasVariant(
              variants,
              'hasLabel',
              'hasLabel'
            ),

            Radio__labelContainer__AzxFR: true,
            'plasmic-default__all': true,
            'plasmic-default__div': true,
          })}
        >
          <PlasmicSlot defaultContents={'Option'} value={args.children} />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

class PlasmicRadio__Renderer extends Renderer<
  PlasmicRadio__VariantsArgs,
  PlasmicRadio__ArgsType,
  PlasmicRadio__OverridesType,
  'root'
> {
  constructor(
    variants: PlasmicRadio__VariantsArgs,
    args: PlasmicRadio__ArgsType
  ) {
    super(variants, args, PlasmicRadio__RenderFunc, 'root');
  }

  protected create(
    variants: PlasmicRadio__VariantsArgs,
    args: PlasmicRadio__ArgsType
  ) {
    return new PlasmicRadio__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicRadio__VariantsArgs)[] {
    return PlasmicRadio__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicRadio__ArgsType)[] {
    return PlasmicRadio__ArgProps;
  }

  forNode(
    name: 'labelContainer'
  ): NodeRenderer<
    PlasmicRadio__VariantsArgs,
    PlasmicRadio__ArgsType,
    {
      labelContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'focusRing'
  ): NodeRenderer<
    PlasmicRadio__VariantsArgs,
    PlasmicRadio__ArgsType,
    {
      focusRing?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'svg'
  ): NodeRenderer<
    PlasmicRadio__VariantsArgs,
    PlasmicRadio__ArgsType,
    {
      svg?: Flex<'svg'>;
    }
  >;

  forNode(
    name: 'buttonContainer'
  ): NodeRenderer<
    PlasmicRadio__VariantsArgs,
    PlasmicRadio__ArgsType,
    {
      buttonContainer?: Flex<'div'>;
      svg?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'root'
  ): NodeRenderer<
    PlasmicRadio__VariantsArgs,
    PlasmicRadio__ArgsType,
    {
      root?: Flex<'div'>;
      buttonContainer?: Flex<'div'>;
      svg?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
      labelContainer?: Flex<'div'>;
    }
  >;

  forNode(name: keyof PlasmicRadio__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicRadioRootProps = PlasmicRadio__VariantsArgs &
  PlasmicRadio__ArgsType & {
    variants?: PlasmicRadio__VariantsArgs;
    args?: PlasmicRadio__ArgsType;
    overrides?: {
      root?: Flex<'div'>;
      buttonContainer?: Flex<'div'>;
      svg?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
      labelContainer?: Flex<'div'>;
    };

    root?: Flex<'div'>;
    buttonContainer?: Flex<'div'>;
    svg?: Flex<'svg'>;
    focusRing?: Flex<'div'>;
    labelContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadio__VariantsArgs
    | keyof PlasmicRadio__ArgsType
    | 'variants'
    | 'args'
    | 'root'
    | 'buttonContainer'
    | 'svg'
    | 'focusRing'
    | 'labelContainer'
  >;

export const PlasmicRadio = function PlasmicRadioRoot<
  T extends PlasmicRadioRootProps
>(props: T & StrictProps<T, PlasmicRadioRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'root',
    descendantNames: [
      'root',
      'buttonContainer',
      'svg',
      'focusRing',
      'labelContainer',
    ],

    internalArgPropNames: PlasmicRadio__ArgProps,
    internalVariantPropNames: PlasmicRadio__VariantProps,
  });

  return PlasmicRadio__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'root',
  });
};

type PlasmicRadioButtonContainerProps = PlasmicRadio__VariantsArgs &
  PlasmicRadio__ArgsType & {
    variants?: PlasmicRadio__VariantsArgs;
    args?: PlasmicRadio__ArgsType;
    overrides?: {
      buttonContainer?: Flex<'div'>;
      svg?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
    };

    buttonContainer?: Flex<'div'>;
    svg?: Flex<'svg'>;
    focusRing?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadio__VariantsArgs
    | keyof PlasmicRadio__ArgsType
    | 'variants'
    | 'args'
    | 'buttonContainer'
    | 'svg'
    | 'focusRing'
  >;

PlasmicRadio.buttonContainer = function PlasmicRadioButtonContainer<
  T extends PlasmicRadioButtonContainerProps
>(props: T & StrictProps<T, PlasmicRadioButtonContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'buttonContainer',
    descendantNames: ['buttonContainer', 'svg', 'focusRing'],
    internalArgPropNames: PlasmicRadio__ArgProps,
    internalVariantPropNames: PlasmicRadio__VariantProps,
  });

  return PlasmicRadio__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'buttonContainer',
  });
};

type PlasmicRadioSvgProps = PlasmicRadio__VariantsArgs &
  PlasmicRadio__ArgsType & {
    variants?: PlasmicRadio__VariantsArgs;
    args?: PlasmicRadio__ArgsType;
    overrides?: {
      svg?: Flex<'svg'>;
    };

    svg?: Flex<'svg'>;
  } & Omit<
    Partial<React.ComponentProps<'svg'>>,
    | keyof PlasmicRadio__VariantsArgs
    | keyof PlasmicRadio__ArgsType
    | 'variants'
    | 'args'
    | 'svg'
  >;

PlasmicRadio.svg = function PlasmicRadioSvg<T extends PlasmicRadioSvgProps>(
  props: T & StrictProps<T, PlasmicRadioSvgProps>
) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'svg',
    descendantNames: ['svg'],
    internalArgPropNames: PlasmicRadio__ArgProps,
    internalVariantPropNames: PlasmicRadio__VariantProps,
  });

  return PlasmicRadio__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'svg',
  });
};

type PlasmicRadioFocusRingProps = PlasmicRadio__VariantsArgs &
  PlasmicRadio__ArgsType & {
    variants?: PlasmicRadio__VariantsArgs;
    args?: PlasmicRadio__ArgsType;
    overrides?: {
      focusRing?: Flex<'div'>;
    };

    focusRing?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadio__VariantsArgs
    | keyof PlasmicRadio__ArgsType
    | 'variants'
    | 'args'
    | 'focusRing'
  >;

PlasmicRadio.focusRing = function PlasmicRadioFocusRing<
  T extends PlasmicRadioFocusRingProps
>(props: T & StrictProps<T, PlasmicRadioFocusRingProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'focusRing',
    descendantNames: ['focusRing'],
    internalArgPropNames: PlasmicRadio__ArgProps,
    internalVariantPropNames: PlasmicRadio__VariantProps,
  });

  return PlasmicRadio__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'focusRing',
  });
};

type PlasmicRadioLabelContainerProps = PlasmicRadio__VariantsArgs &
  PlasmicRadio__ArgsType & {
    variants?: PlasmicRadio__VariantsArgs;
    args?: PlasmicRadio__ArgsType;
    overrides?: {
      labelContainer?: Flex<'div'>;
    };

    labelContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadio__VariantsArgs
    | keyof PlasmicRadio__ArgsType
    | 'variants'
    | 'args'
    | 'labelContainer'
  >;

PlasmicRadio.labelContainer = function PlasmicRadioLabelContainer<
  T extends PlasmicRadioLabelContainerProps
>(props: T & StrictProps<T, PlasmicRadioLabelContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'labelContainer',
    descendantNames: ['labelContainer'],
    internalArgPropNames: PlasmicRadio__ArgProps,
    internalVariantPropNames: PlasmicRadio__VariantProps,
  });

  return PlasmicRadio__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'labelContainer',
  });
};

PlasmicRadio.createRenderer = () => new PlasmicRadio__Renderer({}, {});

export default PlasmicRadio;
/* prettier-ignore-end */
