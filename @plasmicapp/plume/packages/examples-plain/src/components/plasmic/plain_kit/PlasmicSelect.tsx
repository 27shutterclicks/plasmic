/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: zWD5Iq9v1R
import * as React from 'react';
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import SelectTrigger from '../../SelectTrigger'; // plasmic-import: HOQb6uOtcZm/component
import SelectOption from '../../SelectOption'; // plasmic-import: s-Af7sfJ1e/component

import '@plasmicapp/react-web/lib/plasmic.css';
import '../plasmic__default_style.css'; // plasmic-import: global/defaultcss
import './plasmic_plain_kit.css'; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import './PlasmicSelect.css'; // plasmic-import: zWD5Iq9v1R/css

export type PlasmicSelect__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
  placeholder?: SingleBooleanChoiceArg<'placeholder'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
};

export const PlasmicSelect__VariantProps = new Array<
  keyof PlasmicSelect__VariantsArgs
>('isOpen', 'placeholder', 'isDisabled', 'hasLabel');

export type PlasmicSelect__ArgsType = {
  options?: React.ReactNode;
  label?: React.ReactNode;
  triggerContent?: React.ReactNode;
};

export const PlasmicSelect__ArgProps = new Array<keyof PlasmicSelect__ArgsType>(
  'options',
  'label',
  'triggerContent'
);

export type PlasmicSelect__OverridesType = {
  root?: Flex<'div'>;
  labelContainer?: Flex<'div'>;
  trigger?: Flex<typeof SelectTrigger>;
  overlay?: Flex<'div'>;
  optionsContainer?: Flex<'div'>;
};

export interface DefaultSelectProps {
  options?: React.ReactNode;
  label?: React.ReactNode;
  triggerContent?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
  placeholder?: SingleBooleanChoiceArg<'placeholder'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
  className?: string;
}

function PlasmicSelect__RenderFunc(props: {
  variants: PlasmicSelect__VariantsArgs;
  args: PlasmicSelect__ArgsType;
  overrides: PlasmicSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        'Select__root--isDisabled__bbHEkZKgTm': hasVariant(
          variants,
          'isDisabled',
          'isDisabled'
        ),

        'Select__root--placeholder__bbHEk9rnej': hasVariant(
          variants,
          'placeholder',
          'placeholder'
        ),

        Select__root__bbHEk: true,
        'plasmic-default__all': true,
        'plasmic-default__div': true,
      })}
    >
      {(hasVariant(variants, 'hasLabel', 'hasLabel') ? true : false) ? (
        <div
          data-plasmic-name={'labelContainer'}
          data-plasmic-override={overrides.labelContainer}
          className={classNames({
            'Select__labelContainer--hasLabel__27Wmkea3yM': hasVariant(
              variants,
              'hasLabel',
              'hasLabel'
            ),

            Select__labelContainer__27Wmk: true,
            'plasmic-default__all': true,
            'plasmic-default__div': true,
          })}
        >
          <PlasmicSlot
            defaultContents={'Text label'}
            value={args.label}
            className={classNames({
              'Select__slotLabel--hasLabel__uo7Biea3yM': hasVariant(
                variants,
                'hasLabel',
                'hasLabel'
              ),

              Select__slotLabel__uo7Bi: true,
            })}
          />
        </div>
      ) : null}

      <SelectTrigger
        data-plasmic-name={'trigger'}
        data-plasmic-override={overrides.trigger}
        className={classNames({
          'Select__trigger--isDisabled__jzpTMZKgTm': hasVariant(
            variants,
            'isDisabled',
            'isDisabled'
          ),

          'Select__trigger--isOpen__jzpTMjXnkG': hasVariant(
            variants,
            'isOpen',
            'isOpen'
          ),

          Select__trigger__jzpTM: true,
          __wab_instance: true,
        })}
        isActive={
          hasVariant(variants, 'isOpen', 'isOpen')
            ? ('isActive' as const)
            : undefined
        }
        isDisabled={
          hasVariant(variants, 'isDisabled', 'isDisabled')
            ? ('isDisabled' as const)
            : undefined
        }
        {...({} as any)}
      >
        <PlasmicSlot
          defaultContents={'Select an option...'}
          value={args.triggerContent}
          className={classNames({
            'Select__slotTriggerContent--placeholder__Evoqn9rnej': hasVariant(
              variants,
              'placeholder',
              'placeholder'
            ),

            Select__slotTriggerContent__Evoqn: true,
          })}
        />
      </SelectTrigger>

      {(hasVariant(variants, 'isOpen', 'isOpen') ? true : false) ? (
        <div
          data-plasmic-name={'overlay'}
          data-plasmic-override={overrides.overlay}
          className={classNames({
            'Select__overlay--isOpen__lYOdBjXnkG': hasVariant(
              variants,
              'isOpen',
              'isOpen'
            ),

            Select__overlay__lYOdB: true,
            'plasmic-default__all': true,
            'plasmic-default__div': true,
          })}
        >
          <div
            data-plasmic-name={'optionsContainer'}
            data-plasmic-override={overrides.optionsContainer}
            className={classNames({
              Select__optionsContainer__pDeG8: true,
              'plasmic-default__all': true,
              'plasmic-default__div': true,
            })}
          >
            <PlasmicSlot
              defaultContents={React.createElement(
                React.Fragment,
                {},
                <SelectOption
                  className={classNames({
                    Select__selectOption__ftEnZ: true,
                    __wab_instance: true,
                  })}
                  isSelected={'isSelected' as const}
                  {...({} as any)}
                >
                  {'Option 1'}
                </SelectOption>,
                <SelectOption
                  className={classNames({
                    Select__selectOption__iXzVb: true,
                    __wab_instance: true,
                  })}
                  isDisabled={'isDisabled' as const}
                  {...({} as any)}
                >
                  {'Option 2'}
                </SelectOption>,
                <SelectOption
                  className={classNames({
                    Select__selectOption__WCkzP: true,
                    __wab_instance: true,
                  })}
                  {...({} as any)}
                >
                  {'Option 3'}
                </SelectOption>,
                <SelectOption
                  className={classNames({
                    Select__selectOption__TJsPY: true,
                    __wab_instance: true,
                  })}
                  {...({} as any)}
                >
                  {'Option 4'}
                </SelectOption>
              )}
              value={args.options}
            />
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

class PlasmicSelect__Renderer extends Renderer<
  PlasmicSelect__VariantsArgs,
  PlasmicSelect__ArgsType,
  PlasmicSelect__OverridesType,
  'root'
> {
  constructor(
    variants: PlasmicSelect__VariantsArgs,
    args: PlasmicSelect__ArgsType
  ) {
    super(variants, args, PlasmicSelect__RenderFunc, 'root');
  }

  protected create(
    variants: PlasmicSelect__VariantsArgs,
    args: PlasmicSelect__ArgsType
  ) {
    return new PlasmicSelect__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicSelect__VariantsArgs)[] {
    return PlasmicSelect__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicSelect__ArgsType)[] {
    return PlasmicSelect__ArgProps;
  }

  forNode(
    name: 'optionsContainer'
  ): NodeRenderer<
    PlasmicSelect__VariantsArgs,
    PlasmicSelect__ArgsType,
    {
      optionsContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'overlay'
  ): NodeRenderer<
    PlasmicSelect__VariantsArgs,
    PlasmicSelect__ArgsType,
    {
      overlay?: Flex<'div'>;
      optionsContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'trigger'
  ): NodeRenderer<
    PlasmicSelect__VariantsArgs,
    PlasmicSelect__ArgsType,
    {
      trigger?: Flex<typeof SelectTrigger>;
    }
  >;

  forNode(
    name: 'labelContainer'
  ): NodeRenderer<
    PlasmicSelect__VariantsArgs,
    PlasmicSelect__ArgsType,
    {
      labelContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'root'
  ): NodeRenderer<
    PlasmicSelect__VariantsArgs,
    PlasmicSelect__ArgsType,
    {
      root?: Flex<'div'>;
      labelContainer?: Flex<'div'>;
      trigger?: Flex<typeof SelectTrigger>;
      overlay?: Flex<'div'>;
      optionsContainer?: Flex<'div'>;
    }
  >;

  forNode(name: keyof PlasmicSelect__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicSelectRootProps = PlasmicSelect__VariantsArgs &
  PlasmicSelect__ArgsType & {
    variants?: PlasmicSelect__VariantsArgs;
    args?: PlasmicSelect__ArgsType;
    overrides?: {
      root?: Flex<'div'>;
      labelContainer?: Flex<'div'>;
      trigger?: Flex<typeof SelectTrigger>;
      overlay?: Flex<'div'>;
      optionsContainer?: Flex<'div'>;
    };

    root?: Flex<'div'>;
    labelContainer?: Flex<'div'>;
    trigger?: Flex<typeof SelectTrigger>;
    overlay?: Flex<'div'>;
    optionsContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicSelect__VariantsArgs
    | keyof PlasmicSelect__ArgsType
    | 'variants'
    | 'args'
    | 'root'
    | 'labelContainer'
    | 'trigger'
    | 'overlay'
    | 'optionsContainer'
  >;

export const PlasmicSelect = function PlasmicSelectRoot<
  T extends PlasmicSelectRootProps
>(props: T & StrictProps<T, PlasmicSelectRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'root',
    descendantNames: [
      'root',
      'labelContainer',
      'trigger',
      'overlay',
      'optionsContainer',
    ],

    internalArgPropNames: PlasmicSelect__ArgProps,
    internalVariantPropNames: PlasmicSelect__VariantProps,
  });

  return PlasmicSelect__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'root',
  });
};

type PlasmicSelectLabelContainerProps = PlasmicSelect__VariantsArgs &
  PlasmicSelect__ArgsType & {
    variants?: PlasmicSelect__VariantsArgs;
    args?: PlasmicSelect__ArgsType;
    overrides?: {
      labelContainer?: Flex<'div'>;
    };

    labelContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicSelect__VariantsArgs
    | keyof PlasmicSelect__ArgsType
    | 'variants'
    | 'args'
    | 'labelContainer'
  >;

PlasmicSelect.labelContainer = function PlasmicSelectLabelContainer<
  T extends PlasmicSelectLabelContainerProps
>(props: T & StrictProps<T, PlasmicSelectLabelContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'labelContainer',
    descendantNames: ['labelContainer'],
    internalArgPropNames: PlasmicSelect__ArgProps,
    internalVariantPropNames: PlasmicSelect__VariantProps,
  });

  return PlasmicSelect__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'labelContainer',
  });
};

type PlasmicSelectTriggerProps = PlasmicSelect__VariantsArgs &
  PlasmicSelect__ArgsType & {
    variants?: PlasmicSelect__VariantsArgs;
    args?: PlasmicSelect__ArgsType;
    overrides?: {
      trigger?: Flex<typeof SelectTrigger>;
    };

    trigger?: Flex<typeof SelectTrigger>;
  } & Omit<
    Partial<React.ComponentProps<typeof SelectTrigger>>,
    | keyof PlasmicSelect__VariantsArgs
    | keyof PlasmicSelect__ArgsType
    | 'variants'
    | 'args'
    | 'trigger'
  >;

PlasmicSelect.trigger = function PlasmicSelectTrigger<
  T extends PlasmicSelectTriggerProps
>(props: T & StrictProps<T, PlasmicSelectTriggerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'trigger',
    descendantNames: ['trigger'],
    internalArgPropNames: PlasmicSelect__ArgProps,
    internalVariantPropNames: PlasmicSelect__VariantProps,
  });

  return PlasmicSelect__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'trigger',
  });
};

type PlasmicSelectOverlayProps = PlasmicSelect__VariantsArgs &
  PlasmicSelect__ArgsType & {
    variants?: PlasmicSelect__VariantsArgs;
    args?: PlasmicSelect__ArgsType;
    overrides?: {
      overlay?: Flex<'div'>;
      optionsContainer?: Flex<'div'>;
    };

    overlay?: Flex<'div'>;
    optionsContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicSelect__VariantsArgs
    | keyof PlasmicSelect__ArgsType
    | 'variants'
    | 'args'
    | 'overlay'
    | 'optionsContainer'
  >;

PlasmicSelect.overlay = function PlasmicSelectOverlay<
  T extends PlasmicSelectOverlayProps
>(props: T & StrictProps<T, PlasmicSelectOverlayProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'overlay',
    descendantNames: ['overlay', 'optionsContainer'],
    internalArgPropNames: PlasmicSelect__ArgProps,
    internalVariantPropNames: PlasmicSelect__VariantProps,
  });

  return PlasmicSelect__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'overlay',
  });
};

type PlasmicSelectOptionsContainerProps = PlasmicSelect__VariantsArgs &
  PlasmicSelect__ArgsType & {
    variants?: PlasmicSelect__VariantsArgs;
    args?: PlasmicSelect__ArgsType;
    overrides?: {
      optionsContainer?: Flex<'div'>;
    };

    optionsContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicSelect__VariantsArgs
    | keyof PlasmicSelect__ArgsType
    | 'variants'
    | 'args'
    | 'optionsContainer'
  >;

PlasmicSelect.optionsContainer = function PlasmicSelectOptionsContainer<
  T extends PlasmicSelectOptionsContainerProps
>(props: T & StrictProps<T, PlasmicSelectOptionsContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'optionsContainer',
    descendantNames: ['optionsContainer'],
    internalArgPropNames: PlasmicSelect__ArgProps,
    internalVariantPropNames: PlasmicSelect__VariantProps,
  });

  return PlasmicSelect__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'optionsContainer',
  });
};

PlasmicSelect.createRenderer = () => new PlasmicSelect__Renderer({}, {});

export default PlasmicSelect;
/* prettier-ignore-end */
