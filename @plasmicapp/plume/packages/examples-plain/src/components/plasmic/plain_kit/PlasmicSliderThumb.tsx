/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: zv45Jzqo2A
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_plain_kit.css"; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import "./PlasmicSliderThumb.css"; // plasmic-import: zv45Jzqo2A/css

export type PlasmicSliderThumb__VariantsArgs = {
  hasLabel?: SingleBooleanChoiceArg<"hasLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isDragging?: SingleBooleanChoiceArg<"isDragging">;
};

export const PlasmicSliderThumb__VariantProps = new Array<
  keyof PlasmicSliderThumb__VariantsArgs
>("hasLabel", "isDisabled", "isDragging");

export type PlasmicSliderThumb__ArgsType = {
  label?: React.ReactNode;
};

export const PlasmicSliderThumb__ArgProps = new Array<
  keyof PlasmicSliderThumb__ArgsType
>("label");

export type PlasmicSliderThumb__OverridesType = {
  root?: Flex<"div">;
  thumb?: Flex<"div">;
  focusRing?: Flex<"div">;
  labelContainer?: Flex<"div">;
};

export interface DefaultSliderThumbProps {
  label?: React.ReactNode;
  hasLabel?: SingleBooleanChoiceArg<"hasLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isDragging?: SingleBooleanChoiceArg<"isDragging">;
  className?: string;
}

function PlasmicSliderThumb__RenderFunc(props: {
  variants: PlasmicSliderThumb__VariantsArgs;
  args: PlasmicSliderThumb__ArgsType;
  overrides: PlasmicSliderThumb__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "SliderThumb__root--__5LUWOQyxsn": triggers.focusVisibleWithin_root,
        "SliderThumb__root--isDisabled__5LUWOiTnwH": hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        "SliderThumb__root--isDragging__5LUWOUMPBq": hasVariant(
          variants,
          "isDragging",
          "isDragging"
        ),

        SliderThumb__root__5LUWO: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"thumb"}
        data-plasmic-override={overrides.thumb}
        className={classNames({
          "SliderThumb__thumb--__lXzp7Qyxsn": triggers.focusVisibleWithin_root,
          "SliderThumb__thumb--isDragging__lXzp7UMPBq": hasVariant(
            variants,
            "isDragging",
            "isDragging"
          ),

          SliderThumb__thumb__lXzp7: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {(triggers.focusVisibleWithin_root ? true : false) ? (
          <div
            data-plasmic-name={"focusRing"}
            data-plasmic-override={overrides.focusRing}
            className={classNames({
              "SliderThumb__focusRing--__E8lRVQyxsn":
                triggers.focusVisibleWithin_root,
              SliderThumb__focusRing__E8lRV: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          ></div>
        ) : null}
      </div>

      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames({
            "SliderThumb__labelContainer--hasLabel__N_aGIGzvrM": hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            ),

            SliderThumb__labelContainer__N_aGI: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <PlasmicSlot defaultContents={"Label"} value={args.label} />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

class PlasmicSliderThumb__Renderer extends Renderer<
  PlasmicSliderThumb__VariantsArgs,
  PlasmicSliderThumb__ArgsType,
  PlasmicSliderThumb__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicSliderThumb__VariantsArgs,
    args: PlasmicSliderThumb__ArgsType
  ) {
    super(variants, args, PlasmicSliderThumb__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicSliderThumb__VariantsArgs,
    args: PlasmicSliderThumb__ArgsType
  ) {
    return new PlasmicSliderThumb__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicSliderThumb__VariantsArgs)[] {
    return PlasmicSliderThumb__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicSliderThumb__ArgsType)[] {
    return PlasmicSliderThumb__ArgProps;
  }

  forNode(
    name: "root"
  ): NodeRenderer<
    PlasmicSliderThumb__VariantsArgs,
    PlasmicSliderThumb__ArgsType,
    {
      root?: Flex<"div">;
      thumb?: Flex<"div">;
      focusRing?: Flex<"div">;
      labelContainer?: Flex<"div">;
    }
  >;

  forNode(
    name: "thumb"
  ): NodeRenderer<
    PlasmicSliderThumb__VariantsArgs,
    PlasmicSliderThumb__ArgsType,
    {
      thumb?: Flex<"div">;
      focusRing?: Flex<"div">;
    }
  >;

  forNode(
    name: "focusRing"
  ): NodeRenderer<
    PlasmicSliderThumb__VariantsArgs,
    PlasmicSliderThumb__ArgsType,
    {
      focusRing?: Flex<"div">;
    }
  >;

  forNode(
    name: "labelContainer"
  ): NodeRenderer<
    PlasmicSliderThumb__VariantsArgs,
    PlasmicSliderThumb__ArgsType,
    {
      labelContainer?: Flex<"div">;
    }
  >;

  forNode(name: keyof PlasmicSliderThumb__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicSliderThumbRootProps = PlasmicSliderThumb__VariantsArgs &
  PlasmicSliderThumb__ArgsType & {
    variants?: PlasmicSliderThumb__VariantsArgs;
    args?: PlasmicSliderThumb__ArgsType;
    overrides?: {
      root?: Flex<"div">;
      thumb?: Flex<"div">;
      focusRing?: Flex<"div">;
      labelContainer?: Flex<"div">;
    };

    root?: Flex<"div">;
    thumb?: Flex<"div">;
    focusRing?: Flex<"div">;
    labelContainer?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicSliderThumb__VariantsArgs
    | keyof PlasmicSliderThumb__ArgsType
    | "variants"
    | "args"
    | "root"
    | "thumb"
    | "focusRing"
    | "labelContainer"
  >;

export const PlasmicSliderThumb = function PlasmicSliderThumbRoot<
  T extends PlasmicSliderThumbRootProps
>(props: T & StrictProps<T, PlasmicSliderThumbRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "root",
    descendantNames: ["root", "thumb", "focusRing", "labelContainer"],
    internalArgPropNames: PlasmicSliderThumb__ArgProps,
    internalVariantPropNames: PlasmicSliderThumb__VariantProps
  });

  return PlasmicSliderThumb__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "root"
  });
};

type PlasmicSliderThumbThumbProps = PlasmicSliderThumb__VariantsArgs &
  PlasmicSliderThumb__ArgsType & {
    variants?: PlasmicSliderThumb__VariantsArgs;
    args?: PlasmicSliderThumb__ArgsType;
    overrides?: {
      thumb?: Flex<"div">;
      focusRing?: Flex<"div">;
    };

    thumb?: Flex<"div">;
    focusRing?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicSliderThumb__VariantsArgs
    | keyof PlasmicSliderThumb__ArgsType
    | "variants"
    | "args"
    | "thumb"
    | "focusRing"
  >;

PlasmicSliderThumb.thumb = function PlasmicSliderThumbThumb<
  T extends PlasmicSliderThumbThumbProps
>(props: T & StrictProps<T, PlasmicSliderThumbThumbProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "thumb",
    descendantNames: ["thumb", "focusRing"],
    internalArgPropNames: PlasmicSliderThumb__ArgProps,
    internalVariantPropNames: PlasmicSliderThumb__VariantProps
  });

  return PlasmicSliderThumb__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "thumb"
  });
};

type PlasmicSliderThumbFocusRingProps = PlasmicSliderThumb__VariantsArgs &
  PlasmicSliderThumb__ArgsType & {
    variants?: PlasmicSliderThumb__VariantsArgs;
    args?: PlasmicSliderThumb__ArgsType;
    overrides?: {
      focusRing?: Flex<"div">;
    };

    focusRing?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicSliderThumb__VariantsArgs
    | keyof PlasmicSliderThumb__ArgsType
    | "variants"
    | "args"
    | "focusRing"
  >;

PlasmicSliderThumb.focusRing = function PlasmicSliderThumbFocusRing<
  T extends PlasmicSliderThumbFocusRingProps
>(props: T & StrictProps<T, PlasmicSliderThumbFocusRingProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "focusRing",
    descendantNames: ["focusRing"],
    internalArgPropNames: PlasmicSliderThumb__ArgProps,
    internalVariantPropNames: PlasmicSliderThumb__VariantProps
  });

  return PlasmicSliderThumb__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "focusRing"
  });
};

type PlasmicSliderThumbLabelContainerProps = PlasmicSliderThumb__VariantsArgs &
  PlasmicSliderThumb__ArgsType & {
    variants?: PlasmicSliderThumb__VariantsArgs;
    args?: PlasmicSliderThumb__ArgsType;
    overrides?: {
      labelContainer?: Flex<"div">;
    };

    labelContainer?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicSliderThumb__VariantsArgs
    | keyof PlasmicSliderThumb__ArgsType
    | "variants"
    | "args"
    | "labelContainer"
  >;

PlasmicSliderThumb.labelContainer = function PlasmicSliderThumbLabelContainer<
  T extends PlasmicSliderThumbLabelContainerProps
>(props: T & StrictProps<T, PlasmicSliderThumbLabelContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "labelContainer",
    descendantNames: ["labelContainer"],
    internalArgPropNames: PlasmicSliderThumb__ArgProps,
    internalVariantPropNames: PlasmicSliderThumb__VariantProps
  });

  return PlasmicSliderThumb__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "labelContainer"
  });
};

PlasmicSliderThumb.createRenderer = () =>
  new PlasmicSliderThumb__Renderer({}, {});

export default PlasmicSliderThumb;
/* prettier-ignore-end */
