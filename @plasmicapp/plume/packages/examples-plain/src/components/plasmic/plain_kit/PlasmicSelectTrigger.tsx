/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: HOQb6uOtcZm
import * as React from 'react';
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';
import '../plasmic__default_style.css'; // plasmic-import: global/defaultcss
import './plasmic_plain_kit.css'; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import './PlasmicSelectTrigger.css'; // plasmic-import: HOQb6uOtcZm/css
import ChevronDownIcon from './PlasmicIcon__ChevronDown'; // plasmic-import: KhlCVmsFsF/icon
import ChevronUpIcon from './PlasmicIcon__ChevronUp'; // plasmic-import: O5mVhCLjk/icon

export type PlasmicSelectTrigger__VariantsArgs = {
  isActive?: SingleBooleanChoiceArg<'isActive'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
};

export const PlasmicSelectTrigger__VariantProps = new Array<
  keyof PlasmicSelectTrigger__VariantsArgs
>('isActive', 'isDisabled');

export type PlasmicSelectTrigger__ArgsType = {
  children?: React.ReactNode;
};

export const PlasmicSelectTrigger__ArgProps = new Array<
  keyof PlasmicSelectTrigger__ArgsType
>('children');

export type PlasmicSelectTrigger__OverridesType = {
  root?: Flex<'button'>;
  contentContainer?: Flex<'div'>;
  svg?: Flex<'svg'>;
  focusRing?: Flex<'div'>;
};

export interface DefaultSelectTriggerProps {
  children?: React.ReactNode;
  isActive?: SingleBooleanChoiceArg<'isActive'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  className?: string;
}

function PlasmicSelectTrigger__RenderFunc(props: {
  variants: PlasmicSelectTrigger__VariantsArgs;
  args: PlasmicSelectTrigger__ArgsType;
  overrides: PlasmicSelectTrigger__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    'useFocusVisible',
    {
      isTextInput: false,
    }
  );

  const triggers = {
    focusVisible_root: isRootFocusVisible,
  };

  return (
    <button
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      data-plasmic-wrap-flex-child={true}
      className={classNames({
        'SelectTrigger__root--__9i6lxCYQJO': triggers.focusVisible_root,
        'SelectTrigger__root--isActive__9i6lxZ2tTl': hasVariant(
          variants,
          'isActive',
          'isActive'
        ),

        'SelectTrigger__root--isDisabled__9i6lxbjSab': hasVariant(
          variants,
          'isDisabled',
          'isDisabled'
        ),

        SelectTrigger__root__9i6lx: true,
        'plasmic-default__all': true,
        'plasmic-default__button': true,
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleProps]}
    >
      <div
        data-plasmic-name={'contentContainer'}
        data-plasmic-override={overrides.contentContainer}
        className={classNames({
          SelectTrigger__contentContainer__6pISe: true,
          'plasmic-default__all': true,
          'plasmic-default__div': true,
        })}
      >
        <PlasmicSlot
          defaultContents={'Select an option...'}
          value={args.children}
        />
      </div>

      <PlasmicIcon
        data-plasmic-name={'svg'}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant(variants, 'isActive', 'isActive')
            ? ChevronUpIcon
            : ChevronDownIcon
        }
        className={classNames({
          'SelectTrigger__svg--isActive__mr_0wZ2tTl': hasVariant(
            variants,
            'isActive',
            'isActive'
          ),

          SelectTrigger__svg__mr_0w: true,
          'plasmic-default__all': true,
          'plasmic-default__svg': true,
        })}
        role={'img'}
        {...({} as any)}
      ></PlasmicIcon>

      {(triggers.focusVisible_root ? true : false) ? (
        <div
          data-plasmic-name={'focusRing'}
          data-plasmic-override={overrides.focusRing}
          className={classNames({
            'SelectTrigger__focusRing--__GDmEkCYQJO':
              triggers.focusVisible_root,
            SelectTrigger__focusRing__GDmEk: true,
            'plasmic-default__all': true,
            'plasmic-default__div': true,
          })}
        ></div>
      ) : null}
    </button>
  ) as React.ReactElement | null;
}

class PlasmicSelectTrigger__Renderer extends Renderer<
  PlasmicSelectTrigger__VariantsArgs,
  PlasmicSelectTrigger__ArgsType,
  PlasmicSelectTrigger__OverridesType,
  'root'
> {
  constructor(
    variants: PlasmicSelectTrigger__VariantsArgs,
    args: PlasmicSelectTrigger__ArgsType
  ) {
    super(variants, args, PlasmicSelectTrigger__RenderFunc, 'root');
  }

  protected create(
    variants: PlasmicSelectTrigger__VariantsArgs,
    args: PlasmicSelectTrigger__ArgsType
  ) {
    return new PlasmicSelectTrigger__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicSelectTrigger__VariantsArgs)[] {
    return PlasmicSelectTrigger__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicSelectTrigger__ArgsType)[] {
    return PlasmicSelectTrigger__ArgProps;
  }

  forNode(
    name: 'focusRing'
  ): NodeRenderer<
    PlasmicSelectTrigger__VariantsArgs,
    PlasmicSelectTrigger__ArgsType,
    {
      focusRing?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'svg'
  ): NodeRenderer<
    PlasmicSelectTrigger__VariantsArgs,
    PlasmicSelectTrigger__ArgsType,
    {
      svg?: Flex<'svg'>;
    }
  >;

  forNode(
    name: 'contentContainer'
  ): NodeRenderer<
    PlasmicSelectTrigger__VariantsArgs,
    PlasmicSelectTrigger__ArgsType,
    {
      contentContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'root'
  ): NodeRenderer<
    PlasmicSelectTrigger__VariantsArgs,
    PlasmicSelectTrigger__ArgsType,
    {
      root?: Flex<'button'>;
      contentContainer?: Flex<'div'>;
      svg?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
    }
  >;

  forNode(name: keyof PlasmicSelectTrigger__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicSelectTriggerRootProps = PlasmicSelectTrigger__VariantsArgs &
  PlasmicSelectTrigger__ArgsType & {
    variants?: PlasmicSelectTrigger__VariantsArgs;
    args?: PlasmicSelectTrigger__ArgsType;
    overrides?: {
      root?: Flex<'button'>;
      contentContainer?: Flex<'div'>;
      svg?: Flex<'svg'>;
      focusRing?: Flex<'div'>;
    };

    root?: Flex<'button'>;
    contentContainer?: Flex<'div'>;
    svg?: Flex<'svg'>;
    focusRing?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'button'>>,
    | keyof PlasmicSelectTrigger__VariantsArgs
    | keyof PlasmicSelectTrigger__ArgsType
    | 'variants'
    | 'args'
    | 'root'
    | 'contentContainer'
    | 'svg'
    | 'focusRing'
  >;

export const PlasmicSelectTrigger = function PlasmicSelectTriggerRoot<
  T extends PlasmicSelectTriggerRootProps
>(props: T & StrictProps<T, PlasmicSelectTriggerRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'root',
    descendantNames: ['root', 'contentContainer', 'svg', 'focusRing'],
    internalArgPropNames: PlasmicSelectTrigger__ArgProps,
    internalVariantPropNames: PlasmicSelectTrigger__VariantProps,
  });

  return PlasmicSelectTrigger__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'root',
  });
};

type PlasmicSelectTriggerContentContainerProps = PlasmicSelectTrigger__VariantsArgs &
  PlasmicSelectTrigger__ArgsType & {
    variants?: PlasmicSelectTrigger__VariantsArgs;
    args?: PlasmicSelectTrigger__ArgsType;
    overrides?: {
      contentContainer?: Flex<'div'>;
    };

    contentContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicSelectTrigger__VariantsArgs
    | keyof PlasmicSelectTrigger__ArgsType
    | 'variants'
    | 'args'
    | 'contentContainer'
  >;

PlasmicSelectTrigger.contentContainer = function PlasmicSelectTriggerContentContainer<
  T extends PlasmicSelectTriggerContentContainerProps
>(props: T & StrictProps<T, PlasmicSelectTriggerContentContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'contentContainer',
    descendantNames: ['contentContainer'],
    internalArgPropNames: PlasmicSelectTrigger__ArgProps,
    internalVariantPropNames: PlasmicSelectTrigger__VariantProps,
  });

  return PlasmicSelectTrigger__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'contentContainer',
  });
};

type PlasmicSelectTriggerSvgProps = PlasmicSelectTrigger__VariantsArgs &
  PlasmicSelectTrigger__ArgsType & {
    variants?: PlasmicSelectTrigger__VariantsArgs;
    args?: PlasmicSelectTrigger__ArgsType;
    overrides?: {
      svg?: Flex<'svg'>;
    };

    svg?: Flex<'svg'>;
  } & Omit<
    Partial<React.ComponentProps<'svg'>>,
    | keyof PlasmicSelectTrigger__VariantsArgs
    | keyof PlasmicSelectTrigger__ArgsType
    | 'variants'
    | 'args'
    | 'svg'
  >;

PlasmicSelectTrigger.svg = function PlasmicSelectTriggerSvg<
  T extends PlasmicSelectTriggerSvgProps
>(props: T & StrictProps<T, PlasmicSelectTriggerSvgProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'svg',
    descendantNames: ['svg'],
    internalArgPropNames: PlasmicSelectTrigger__ArgProps,
    internalVariantPropNames: PlasmicSelectTrigger__VariantProps,
  });

  return PlasmicSelectTrigger__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'svg',
  });
};

type PlasmicSelectTriggerFocusRingProps = PlasmicSelectTrigger__VariantsArgs &
  PlasmicSelectTrigger__ArgsType & {
    variants?: PlasmicSelectTrigger__VariantsArgs;
    args?: PlasmicSelectTrigger__ArgsType;
    overrides?: {
      focusRing?: Flex<'div'>;
    };

    focusRing?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicSelectTrigger__VariantsArgs
    | keyof PlasmicSelectTrigger__ArgsType
    | 'variants'
    | 'args'
    | 'focusRing'
  >;

PlasmicSelectTrigger.focusRing = function PlasmicSelectTriggerFocusRing<
  T extends PlasmicSelectTriggerFocusRingProps
>(props: T & StrictProps<T, PlasmicSelectTriggerFocusRingProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'focusRing',
    descendantNames: ['focusRing'],
    internalArgPropNames: PlasmicSelectTrigger__ArgProps,
    internalVariantPropNames: PlasmicSelectTrigger__VariantProps,
  });

  return PlasmicSelectTrigger__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'focusRing',
  });
};

PlasmicSelectTrigger.createRenderer = () =>
  new PlasmicSelectTrigger__Renderer({}, {});

export default PlasmicSelectTrigger;
/* prettier-ignore-end */
