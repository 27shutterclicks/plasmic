/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: Oj95bmXSU2
import * as React from 'react';
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import Radio from '../../Radio'; // plasmic-import: Ax1JW2mE4J/component

import '@plasmicapp/react-web/lib/plasmic.css';
import '../plasmic__default_style.css'; // plasmic-import: global/defaultcss
import './plasmic_plain_kit.css'; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import './PlasmicRadioGroup.css'; // plasmic-import: Oj95bmXSU2/css

export type PlasmicRadioGroup__VariantsArgs = {
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  isHorizontal?: SingleBooleanChoiceArg<'isHorizontal'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
};

export const PlasmicRadioGroup__VariantProps = new Array<
  keyof PlasmicRadioGroup__VariantsArgs
>('isDisabled', 'isHorizontal', 'hasLabel');

export type PlasmicRadioGroup__ArgsType = {
  label?: React.ReactNode;
  children?: React.ReactNode;
};

export const PlasmicRadioGroup__ArgProps = new Array<
  keyof PlasmicRadioGroup__ArgsType
>('label', 'children');

export type PlasmicRadioGroup__OverridesType = {
  root?: Flex<'div'>;
  labelContainer?: Flex<'div'>;
  optionsContainer?: Flex<'div'>;
};

export interface DefaultRadioGroupProps {
  label?: React.ReactNode;
  children?: React.ReactNode;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
  isHorizontal?: SingleBooleanChoiceArg<'isHorizontal'>;
  hasLabel?: SingleBooleanChoiceArg<'hasLabel'>;
  className?: string;
}

function PlasmicRadioGroup__RenderFunc(props: {
  variants: PlasmicRadioGroup__VariantsArgs;
  args: PlasmicRadioGroup__ArgsType;
  overrides: PlasmicRadioGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        'RadioGroup__root--isHorizontal__nC5ZpBX0XH': hasVariant(
          variants,
          'isHorizontal',
          'isHorizontal'
        ),

        RadioGroup__root__nC5Zp: true,
        'plasmic-default__all': true,
        'plasmic-default__div': true,
      })}
    >
      {(hasVariant(variants, 'hasLabel', 'hasLabel') ? true : false) ? (
        <div
          data-plasmic-name={'labelContainer'}
          data-plasmic-override={overrides.labelContainer}
          className={classNames({
            'RadioGroup__labelContainer--hasLabel__9rC4FtOWqv': hasVariant(
              variants,
              'hasLabel',
              'hasLabel'
            ),

            'RadioGroup__labelContainer--isHorizontal__9rC4FBX0XH': hasVariant(
              variants,
              'isHorizontal',
              'isHorizontal'
            ),

            RadioGroup__labelContainer__9rC4F: true,
            'plasmic-default__all': true,
            'plasmic-default__div': true,
          })}
        >
          <PlasmicSlot
            defaultContents={'Label'}
            value={args.label}
            className={classNames({ RadioGroup__slotLabel__ucV6p: true })}
          />
        </div>
      ) : null}

      <div
        data-plasmic-name={'optionsContainer'}
        data-plasmic-override={overrides.optionsContainer}
        data-plasmic-wrap-flex-child={true}
        className={classNames({
          'RadioGroup__optionsContainer--isHorizontal__StqkqBX0XH': hasVariant(
            variants,
            'isHorizontal',
            'isHorizontal'
          ),

          RadioGroup__optionsContainer__Stqkq: true,
          'plasmic-default__all': true,
          'plasmic-default__div': true,
        })}
      >
        <PlasmicSlot
          defaultContents={React.createElement(
            React.Fragment,
            {},
            <Radio
              className={classNames({
                RadioGroup__radio__45Bkq: true,
                __wab_instance: true,
              })}
              hasLabel={'hasLabel' as const}
              {...({} as any)}
            >
              {'Option 1'}
            </Radio>,
            <Radio
              className={classNames({
                RadioGroup__radio__0Pud7: true,
                __wab_instance: true,
              })}
              hasLabel={'hasLabel' as const}
              isSelected={'isSelected' as const}
              {...({} as any)}
            >
              {'Option 2'}
            </Radio>,
            <Radio
              className={classNames({
                RadioGroup__radio__GyXZ6: true,
                __wab_instance: true,
              })}
              hasLabel={'hasLabel' as const}
              isDisabled={'isDisabled' as const}
              {...({} as any)}
            >
              {'Option 3'}
            </Radio>,
            <Radio
              className={classNames({
                RadioGroup__radio__sbfnA: true,
                __wab_instance: true,
              })}
              hasLabel={'hasLabel' as const}
              {...({} as any)}
            >
              {'Option 4'}
            </Radio>
          )}
          value={args.children}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

class PlasmicRadioGroup__Renderer extends Renderer<
  PlasmicRadioGroup__VariantsArgs,
  PlasmicRadioGroup__ArgsType,
  PlasmicRadioGroup__OverridesType,
  'root'
> {
  constructor(
    variants: PlasmicRadioGroup__VariantsArgs,
    args: PlasmicRadioGroup__ArgsType
  ) {
    super(variants, args, PlasmicRadioGroup__RenderFunc, 'root');
  }

  protected create(
    variants: PlasmicRadioGroup__VariantsArgs,
    args: PlasmicRadioGroup__ArgsType
  ) {
    return new PlasmicRadioGroup__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicRadioGroup__VariantsArgs)[] {
    return PlasmicRadioGroup__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicRadioGroup__ArgsType)[] {
    return PlasmicRadioGroup__ArgProps;
  }

  forNode(
    name: 'optionsContainer'
  ): NodeRenderer<
    PlasmicRadioGroup__VariantsArgs,
    PlasmicRadioGroup__ArgsType,
    {
      optionsContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'labelContainer'
  ): NodeRenderer<
    PlasmicRadioGroup__VariantsArgs,
    PlasmicRadioGroup__ArgsType,
    {
      labelContainer?: Flex<'div'>;
    }
  >;

  forNode(
    name: 'root'
  ): NodeRenderer<
    PlasmicRadioGroup__VariantsArgs,
    PlasmicRadioGroup__ArgsType,
    {
      root?: Flex<'div'>;
      labelContainer?: Flex<'div'>;
      optionsContainer?: Flex<'div'>;
    }
  >;

  forNode(name: keyof PlasmicRadioGroup__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicRadioGroupRootProps = PlasmicRadioGroup__VariantsArgs &
  PlasmicRadioGroup__ArgsType & {
    variants?: PlasmicRadioGroup__VariantsArgs;
    args?: PlasmicRadioGroup__ArgsType;
    overrides?: {
      root?: Flex<'div'>;
      labelContainer?: Flex<'div'>;
      optionsContainer?: Flex<'div'>;
    };

    root?: Flex<'div'>;
    labelContainer?: Flex<'div'>;
    optionsContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadioGroup__VariantsArgs
    | keyof PlasmicRadioGroup__ArgsType
    | 'variants'
    | 'args'
    | 'root'
    | 'labelContainer'
    | 'optionsContainer'
  >;

export const PlasmicRadioGroup = function PlasmicRadioGroupRoot<
  T extends PlasmicRadioGroupRootProps
>(props: T & StrictProps<T, PlasmicRadioGroupRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'root',
    descendantNames: ['root', 'labelContainer', 'optionsContainer'],
    internalArgPropNames: PlasmicRadioGroup__ArgProps,
    internalVariantPropNames: PlasmicRadioGroup__VariantProps,
  });

  return PlasmicRadioGroup__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'root',
  });
};

type PlasmicRadioGroupLabelContainerProps = PlasmicRadioGroup__VariantsArgs &
  PlasmicRadioGroup__ArgsType & {
    variants?: PlasmicRadioGroup__VariantsArgs;
    args?: PlasmicRadioGroup__ArgsType;
    overrides?: {
      labelContainer?: Flex<'div'>;
    };

    labelContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadioGroup__VariantsArgs
    | keyof PlasmicRadioGroup__ArgsType
    | 'variants'
    | 'args'
    | 'labelContainer'
  >;

PlasmicRadioGroup.labelContainer = function PlasmicRadioGroupLabelContainer<
  T extends PlasmicRadioGroupLabelContainerProps
>(props: T & StrictProps<T, PlasmicRadioGroupLabelContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'labelContainer',
    descendantNames: ['labelContainer'],
    internalArgPropNames: PlasmicRadioGroup__ArgProps,
    internalVariantPropNames: PlasmicRadioGroup__VariantProps,
  });

  return PlasmicRadioGroup__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'labelContainer',
  });
};

type PlasmicRadioGroupOptionsContainerProps = PlasmicRadioGroup__VariantsArgs &
  PlasmicRadioGroup__ArgsType & {
    variants?: PlasmicRadioGroup__VariantsArgs;
    args?: PlasmicRadioGroup__ArgsType;
    overrides?: {
      optionsContainer?: Flex<'div'>;
    };

    optionsContainer?: Flex<'div'>;
  } & Omit<
    Partial<React.ComponentProps<'div'>>,
    | keyof PlasmicRadioGroup__VariantsArgs
    | keyof PlasmicRadioGroup__ArgsType
    | 'variants'
    | 'args'
    | 'optionsContainer'
  >;

PlasmicRadioGroup.optionsContainer = function PlasmicRadioGroupOptionsContainer<
  T extends PlasmicRadioGroupOptionsContainerProps
>(props: T & StrictProps<T, PlasmicRadioGroupOptionsContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: 'optionsContainer',
    descendantNames: ['optionsContainer'],
    internalArgPropNames: PlasmicRadioGroup__ArgProps,
    internalVariantPropNames: PlasmicRadioGroup__VariantProps,
  });

  return PlasmicRadioGroup__RenderFunc({
    variants,
    args,
    overrides,
    forNode: 'optionsContainer',
  });
};

PlasmicRadioGroup.createRenderer = () =>
  new PlasmicRadioGroup__Renderer({}, {});

export default PlasmicRadioGroup;
/* prettier-ignore-end */
