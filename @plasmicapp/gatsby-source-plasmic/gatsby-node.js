const util = require("util");
const cp = require("child_process");
const fs = require("fs");
const path = require("path");
const exec = util.promisify(cp.exec);
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);


exports.onPreInit = async (_, pluginOptions) => {

    // TODO: handle defaults, possible errors with exec.
    const { dir, projectIds } = pluginOptions;
    await exec(`plasmic sync --projects ${projectIds.join(' ')}` , { cwd: dir });
    const configPath = path.join(dir, "plasmic.json");

    // TODO: handle errors writing files.
    const configData = await readFile(configPath);
    const config = JSON.parse(configData.toString());

    const componentData = [];

    for (const project of config.projects) {
      for (const component of project.components) {
        const componentPath = path.join(
          dir,
          config.srcDir,
          component.renderModuleFilePath
        );
        componentData.push({
          projectId: project.projectId,
          name: component.name,
          path: componentPath,
        });
      }
    }

    const componentExports = componentData
      .map(
        ({ projectId, name, path }) =>
          `export {default as ${name}${projectId}} from '${path}';`
      )
      .join("\n");
    const entryPointFile = `/** This class is auto-generated by Plasmic; please do not edit! */\n${componentExports}`;

    const outDir = path.join(__dirname, '.entrypoint.js');

    // TODO: handle errors writing files.
    await writeFile(outDir, entryPointFile);
};
