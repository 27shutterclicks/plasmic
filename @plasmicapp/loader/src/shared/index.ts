import cp from "child_process";
import fs from "fs";
import path from "path";

function execOrFail(dir: string, command: string, message: string) {
  try {
    cp.execSync(command, { cwd: dir, stdio: "inherit" });
  } catch {
    console.error(message);
    process.exit(1);
  }
}

function tryInitializePlasmicDir(dir: string) {
  const plasmicDir = path.join(dir, ".plasmic");
  const plasmicExecPath = path.join(dir, "node_modules", ".bin", "plasmic");
  const configPath = path.join(plasmicDir, "plasmic.json");
  if (fs.existsSync(configPath)) {
    console.log(".plasmic directory detected, skipping init.");
    return;
  }

  fs.mkdirSync(plasmicDir);

  execOrFail(
    plasmicDir,
    `node ${plasmicExecPath} init --yes`,
    "Unable to initialize plasmic. Please check the above error and try again."
  );
}

type ComponentMap = {
  [componentName: string]: { projectId: string; path: string }[];
};

function generatePlasmicLoader(dir: string) {
  const configPath = path.join(dir, "plasmic.json");
  const entrypointPath = path.join(__dirname, "../", "PlasmicLoader.jsx");

  const configData = fs.readFileSync(configPath);
  const config = JSON.parse(configData.toString());
  const componentData: ComponentMap = {};

  for (const project of config.projects) {
    for (const component of project.components) {
      const componentPath = path.join(
        dir,
        config.srcDir,
        component.renderModuleFilePath
      );
      if (!componentData[component.name]) {
        componentData[component.name] = [];
      }

      componentData[component.name].push({
        projectId: project.projectId,
        path: componentPath,
      });
    }
  }

  const globalScreenVariantProvider = config.globalVariants?.variantGroups?.find(
    (group: any) => group.name === "Screen"
  )?.contextFilePath;
  const screenVariantPath = globalScreenVariantProvider
    ? path.join(dir, config.srcDir, globalScreenVariantProvider)
    : "";

  const entryPointFile = `
/** This class is auto-generated by Plasmic; please do not edit! */
import * as React from 'react';
${Object.entries(componentData)
  .map(([name, projects]) =>
    projects.map(
      ({ projectId, path }) => `import ${name}${projectId} from '${path}';`
    )
  )
  .join("\n")}
${
  screenVariantPath
    ? `import {ScreenVariantProvider} from "${screenVariantPath}"`
    : ""
}

const componentsWithOneProject = {
  ${Object.entries(componentData)
    .filter(([_, projects]) => projects.length === 1)
    .map(([name, [{ projectId }]]) => `"${name}": ${name}${projectId},`)
    .join("\n")}
};
const componentMap = {
  ${Object.entries(componentData)
    .map(
      ([name, projects]) => `"${name}": {
      ${projects
        .map(({ projectId }) => `"${projectId}": ${name}${projectId}`)
        .join("\n")}
    },`
    )
    .join("\n")}
}

function findComponent(projectId, component) {
  if (componentsWithOneProject[component]) {
    return componentsWithOneProject[component];
  }
  if (!componentMap[component]) {
    throw new Error(\`The component \${component} could not be found.\`);
  }
  if (!componentMap[component][projectId]) {
    throw new Error(\`The component \${component} requires a valid projectId. Passed: \${projectId}. Options: \${Object.keys(componentMap[component])}\`);
  }
  return componentMap[component][projectId];
}

export default function PlasmicLoader({ projectId, component, componentProps = {} }) {
  const Wrapper = ${
    screenVariantPath ? "ScreenVariantProvider" : "React.Fragment"
  }
  const Component = findComponent(projectId, component);

  return React.createElement(Wrapper, {}, React.createElement(Component, componentProps));
}`;
  fs.writeFileSync(entrypointPath, entryPointFile);
}

export type PlamicOpts = {
  dir: string;
  projectIds: string[];
};

export function generateEntrypoint({ dir, projectIds }: PlamicOpts) {
  console.log("Syncing plasmic projects: ", projectIds);
  const plasmicDir = path.join(dir, ".plasmic");
  const plasmicExecPath = path.join(dir, "node_modules", ".bin", "plasmic");

  execOrFail(
    dir,
    `node ${plasmicExecPath} auth --check`,
    "Unable to authenticate. Please check your auth config and try again."
  );

  tryInitializePlasmicDir(dir);

  execOrFail(
    plasmicDir,
    `node ${plasmicExecPath} sync --yes  --projects ${projectIds.join(" ")}`,
    "Unable to sync plasmic project. Please check the above error and try again."
  );

  generatePlasmicLoader(plasmicDir);
}
