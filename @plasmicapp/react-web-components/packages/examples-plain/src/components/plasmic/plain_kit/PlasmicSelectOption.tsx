/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtmthg1Ku3JDsEq1LhL9ox
// Component: s-Af7sfJ1e
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_plain_kit.css"; // plasmic-import: wtmthg1Ku3JDsEq1LhL9ox/projectcss
import "./PlasmicSelectOption.css"; // plasmic-import: s-Af7sfJ1e/css
import CheckIcon from "./PlasmicIcon__Check"; // plasmic-import: g6WlrAGLKi/icon

export type PlasmicSelectOption__VariantsArgs = {
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};

export const PlasmicSelectOption__VariantProps = new Array<
  keyof PlasmicSelectOption__VariantsArgs
>("isDisabled", "isSelected");

export type PlasmicSelectOption__ArgsType = {
  children?: React.ReactNode;
};

export const PlasmicSelectOption__ArgProps = new Array<
  keyof PlasmicSelectOption__ArgsType
>("children");

export type PlasmicSelectOption__OverridesType = {
  root?: Flex<"div">;
  optionContainer?: Flex<"div">;
  svg?: Flex<"svg">;
};

export interface DefaultSelectOptionProps {
  children?: React.ReactNode;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

function PlasmicSelectOption__RenderFunc(props: {
  variants: PlasmicSelectOption__VariantsArgs;
  args: PlasmicSelectOption__ArgsType;
  overrides: PlasmicSelectOption__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "SelectOption__root--isDisabled__rxckBKOw4h": hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        "SelectOption__root--isSelected__rxckB4F1ep": hasVariant(
          variants,
          "isSelected",
          "isSelected"
        ),

        SelectOption__root__rxckB: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true
      })}
    >
      <div
        data-plasmic-name={"optionContainer"}
        data-plasmic-override={overrides.optionContainer}
        className={classNames({
          "SelectOption__optionContainer--isSelected__v2KDY4F1ep": hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),

          SelectOption__optionContainer__v2KDY: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <PlasmicSlot
          defaultContents={"Option"}
          value={args.children}
          className={classNames({
            "SelectOption__slotChildren--isDisabled__Qc5J8KOw4h": hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            "SelectOption__slotChildren--isSelected__Qc5J84F1ep": hasVariant(
              variants,
              "isSelected",
              "isSelected"
            ),

            SelectOption__slotChildren__Qc5J8: true
          })}
        />
      </div>

      {(hasVariant(variants, "isSelected", "isSelected") ? true : false) ? (
        <CheckIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames({
            "SelectOption__svg--isDisabled__NbPpmKOw4h": hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            "SelectOption__svg--isSelected__NbPpm4F1ep": hasVariant(
              variants,
              "isSelected",
              "isSelected"
            ),

            SelectOption__svg__NbPpm: true,
            "plasmic-default__all": true,
            "plasmic-default__svg": true
          })}
          role={"img"}
          {...({} as any)}
        ></CheckIcon>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

class PlasmicSelectOption__Renderer extends Renderer<
  PlasmicSelectOption__VariantsArgs,
  PlasmicSelectOption__ArgsType,
  PlasmicSelectOption__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicSelectOption__VariantsArgs,
    args: PlasmicSelectOption__ArgsType
  ) {
    super(variants, args, PlasmicSelectOption__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicSelectOption__VariantsArgs,
    args: PlasmicSelectOption__ArgsType
  ) {
    return new PlasmicSelectOption__Renderer(variants, args);
  }

  getInternalVariantProps(): (keyof PlasmicSelectOption__VariantsArgs)[] {
    return PlasmicSelectOption__VariantProps;
  }

  getInternalArgProps(): (keyof PlasmicSelectOption__ArgsType)[] {
    return PlasmicSelectOption__ArgProps;
  }

  forNode(
    name: "root"
  ): NodeRenderer<
    PlasmicSelectOption__VariantsArgs,
    PlasmicSelectOption__ArgsType,
    {
      root?: Flex<"div">;
      optionContainer?: Flex<"div">;
      svg?: Flex<"svg">;
    }
  >;

  forNode(
    name: "optionContainer"
  ): NodeRenderer<
    PlasmicSelectOption__VariantsArgs,
    PlasmicSelectOption__ArgsType,
    {
      optionContainer?: Flex<"div">;
    }
  >;

  forNode(
    name: "svg"
  ): NodeRenderer<
    PlasmicSelectOption__VariantsArgs,
    PlasmicSelectOption__ArgsType,
    {
      svg?: Flex<"svg">;
    }
  >;

  forNode(name: keyof PlasmicSelectOption__OverridesType) {
    return super.forNode(name);
  }
}

type PlasmicSelectOptionRootProps = PlasmicSelectOption__VariantsArgs &
  PlasmicSelectOption__ArgsType & {
    variants?: PlasmicSelectOption__VariantsArgs;
    args?: PlasmicSelectOption__ArgsType;
    overrides?: {
      root?: Flex<"div">;
      optionContainer?: Flex<"div">;
      svg?: Flex<"svg">;
    };

    root?: Flex<"div">;
    optionContainer?: Flex<"div">;
    svg?: Flex<"svg">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicSelectOption__VariantsArgs
    | keyof PlasmicSelectOption__ArgsType
    | "variants"
    | "args"
    | "root"
    | "optionContainer"
    | "svg"
  >;

export const PlasmicSelectOption = function PlasmicSelectOptionRoot<
  T extends PlasmicSelectOptionRootProps
>(props: T & StrictProps<T, PlasmicSelectOptionRootProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "root",
    descendantNames: ["root", "optionContainer", "svg"],
    internalArgPropNames: PlasmicSelectOption__ArgProps,
    internalVariantPropNames: PlasmicSelectOption__VariantProps
  });

  return PlasmicSelectOption__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "root"
  });
};

type PlasmicSelectOptionOptionContainerProps = PlasmicSelectOption__VariantsArgs &
  PlasmicSelectOption__ArgsType & {
    variants?: PlasmicSelectOption__VariantsArgs;
    args?: PlasmicSelectOption__ArgsType;
    overrides?: {
      optionContainer?: Flex<"div">;
    };

    optionContainer?: Flex<"div">;
  } & Omit<
    Partial<React.ComponentProps<"div">>,
    | keyof PlasmicSelectOption__VariantsArgs
    | keyof PlasmicSelectOption__ArgsType
    | "variants"
    | "args"
    | "optionContainer"
  >;

PlasmicSelectOption.optionContainer = function PlasmicSelectOptionOptionContainer<
  T extends PlasmicSelectOptionOptionContainerProps
>(props: T & StrictProps<T, PlasmicSelectOptionOptionContainerProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "optionContainer",
    descendantNames: ["optionContainer"],
    internalArgPropNames: PlasmicSelectOption__ArgProps,
    internalVariantPropNames: PlasmicSelectOption__VariantProps
  });

  return PlasmicSelectOption__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "optionContainer"
  });
};

type PlasmicSelectOptionSvgProps = PlasmicSelectOption__VariantsArgs &
  PlasmicSelectOption__ArgsType & {
    variants?: PlasmicSelectOption__VariantsArgs;
    args?: PlasmicSelectOption__ArgsType;
    overrides?: {
      svg?: Flex<"svg">;
    };

    svg?: Flex<"svg">;
  } & Omit<
    Partial<React.ComponentProps<"svg">>,
    | keyof PlasmicSelectOption__VariantsArgs
    | keyof PlasmicSelectOption__ArgsType
    | "variants"
    | "args"
    | "svg"
  >;

PlasmicSelectOption.svg = function PlasmicSelectOptionSvg<
  T extends PlasmicSelectOptionSvgProps
>(props: T & StrictProps<T, PlasmicSelectOptionSvgProps>) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "svg",
    descendantNames: ["svg"],
    internalArgPropNames: PlasmicSelectOption__ArgProps,
    internalVariantPropNames: PlasmicSelectOption__VariantProps
  });

  return PlasmicSelectOption__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "svg"
  });
};

PlasmicSelectOption.createRenderer = () =>
  new PlasmicSelectOption__Renderer({}, {});

export default PlasmicSelectOption;
/* prettier-ignore-end */
